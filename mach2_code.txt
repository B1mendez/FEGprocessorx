010000000	// MOV r0 0
010001000	// MOV r1 0
010010000	// MOV r2 0
010011000	// MOV r3 0
010100000	// MOV r4 0
010101000	// MOV r5 0
010110000	// MOV r6 0
010111000	// MOV r7 0
010000000	// MOV r0 0 		// initialize loop counter i
010011011	// MOV r3 3            // 00000011
101011011	// SHIFT r3 L 3        // 00011000
010100001	// MOV r4 1            // 00000001
011011100	// XOR r3 r4           // 00011001
101011010	// SHIFT r3 L 2        // 01100100 = 100 register r0 stored
001000011	// STR r0 r3
010100000	// MOV r4 0            // temp
000000011	// LDR r0 r3           // start for loop here
010001000	// MOV r1 0
010010000	// MOV r2 0
010011000	// MOV r3 0
010100000	// MOV r4 0
010101000	// MOV r5 0
010110000	// MOV r6 0
010111000	// MOV r7 0
101000001	// SHIFT r0 L 1
010000111	// ADD r0 3 
010000111	// ADD r0 3
010000111	// ADD r0 3
010000111	// ADD r0 3
010000111	// ADD r0 3
010000111	// ADD r0 3
010000111	// ADD r0 3
010000111	// ADD r0 3
010000111	// ADD r0 3
010000111	// ADD r0 3		// r0 = 2*i + 30
000001000	// LDR r1 r0		// r1 = data_mem[2*i + 30] LSW
010000101	// ADD r0 1
000010000	// LDR r2 r0		// r2 = data_mem[2*i + 31] MSB
010011000	// MOV r3 0   		// Store all the parity bits as p8_p4_p2_p1_p0_000       
010100001	// MOV r4 1
100100001	// AND r4 r1
011011100	// XOR r3 r4		// 0000000p0
101011011	// SHIFT r3 L 3		// 0000p0_000
010100010	// MOV r4 2		// Mask all bits in r1 except the second bit (p1)
100100001	// AND r4 r1			
101100011	// SHIFT r4 L 3 		// 000p10_000
011011100	// XOR r3 r4		// 000p1_p0_000 stored in r3
010100010	// MOV r4 2		// 10
101100001	// SHIFT r4 L 1		// 00000100
100100001	// AND r4 r1		// Mask all bits in r1 except the second bit (p2)
101100011	// SHIFT r4 L 3     	// Shift to the right to align with p2 in r3
011011100	// XOR r3 r4          	// Store p2 in r3 00_p2_p1_p0_000
010100010	// MOV r4 2		// Mask all bits in r1 except the fifth bit (p4) 00000010 00000100 00001000
101100011	// SHIFT r4 L 3		//00010000         
100100001	// AND r4 r1	        
101100010	// SHIFT r4 L 2     	// Shift to the right to align with p4 in r3
011011100	// XOR r3 r4          	// Store p4 in r3 0p4_p2_p1_p0_000
010100001	// MOV r4 1		// Mask all bits in r2 except the first bit (p8) 00000001
100100010	// AND r4 r2		    // 0000 000p8
101100011	// SHIFT r4 L 3     	// Shift to the right to align with p8 in r3
101100011	// SHIFT r4 L 3
101100001	// SHIFT r4 L 1
011011100	// XOR r3 r4          	// Store p8 in r3 p8_p4_p2_p1_p0_000
010100000	// MOV r4 0          	
010101000	// MOV r5 0          	
010110011	// MOV r6 3		// Mask d4 d3 d2 0 0 0 0 0 	3 = 11
101110001	// SHIFT r6 L 1		// 00000110
010111001	// MOV r7 1
011110111	// XOR r6 r7		// 00000111
101110011	// SHIFT r6 L 3
101110010	// SHIFT r6 L 2		// 11100000	
100110001	// AND r6 r1	       	
011100110	// XOR r4 r6         	// Store d2-d4 in r4
010110010	// MOV r6 2		// get d1 and add to r4
101110010	// SHIFT r6 L 2		//00001000		
100110001	// AND r6 r1
101110001	// SHIFT r6 L 1
011100110	// XOR r4 r6		// store d1:d4 in r4 d4_d3_d2_d1_0000
010110011	// MOV r6 3		// mask p8 to have d5:d11 3 = 00000011
101110010	// SHIFT r6 L 2		// 00001100
010111011	// MOV r7 3
011110111	// XOR r6 r7		//00001111
101110010	// SHIFT r6 L 2
010111011	// MOV r7 3
011110111	// XOR r6 r7		//00111111
101110010	// SHIFT r6 L 2
010111010	// MOV r7 2
011110111	// XOR r6 r7		//11111110			
100110010	// AND r6 r2 	
011101110	// XOR r5 r6          	// Store d5:d11 in r5 d11_d10_d9_d8_d7_d6_d5_0
010110000	// MOV r6 0		// Calculate parity bit and store in r6	to get p8_p4_p2_p1_p0_000 calc
010111010	// MOV r7 2		// d11 
101111011	// SHIFT r7 L 3		     
101111011	// SHIFT r7 L 3		// 10000000
100111101	// AND r7 r5
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d10
101111011	// SHIFT r7 L 3
101111010	// SHIFT r7 L 2		// 01000000
100111101	// AND r7 r5
101111001	// SHIFT r7 L 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d9
101111011	// SHIFT r7 L 3
101111001	// SHIFT r7 L 1		// 00100000
100111101	// AND r7 r5
101111010	// SHIFT r7 L 2
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d8
101111011	// SHIFT r7 L 3		// 00010000
100111101	// AND r7 r5
101111011	// SHIFT r7 L 3
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d7
101111010	// SHIFT r7 L 2
100111101	// AND r7 r5
101111011	// SHIFT r7 L 3
101111001	// SHIFT r7 L 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d6
101111001	// SHIFT r7 L 1
100111101	// AND r7 r5
101111011	// SHIFT r7 L 3
101111010	// SHIFT r7 L 2
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d5
100111101	// AND r7 r5
101111011	// SHIFT r7 L 3
101111011	// SHIFT r7 L 3
011110111	// XOR r6 r7		// p8cal_0000000
010111010	// MOV r7 2		// d11
101111011	// SHIFT r7 L 3
101111011	// SHIFT r7 L 3
100111101	// AND r7 r5
101111101	// SHIFT r7 R 1 
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d10
101111011	// SHIFT r7 L 3
101111010	// SHIFT r7 L 2
100111101	// AND r7 r5
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d9
101111011	// SHIFT r7 L 3
101111001	// SHIFT r7 L 1
100111101	// AND r7 r5
101111001	// SHIFT r7 L 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d8
101111011	// SHIFT r7 L 3
100111101	// AND r7 r5
101111010	// SHIFT r7 L 2
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d4
101111011	// SHIFT r7 L 3
101111011	// SHIFT r7 L 3
100111100	// AND r7 r4
101111101	// SHIFT r7 R 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d3
101111011	// SHIFT r7 L 3
101111010	// SHIFT r7 L 2
100111100	// AND r7 r4
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d2
101111011	// SHIFT r7 L 3
101111001	// SHIFT r7 L 1		// 00100000
100111100	// AND r7 r4
101111001	// SHIFT r7 L 1
011110111	// XOR r6 r7		// p8cal_p4cal_000000
010111010	// MOV r7 2		// d11
101111011	// SHIFT r7 L 3
101111011	// SHIFT r7 L 3
100111101	// AND r7 r5
101111110	// SHIFT r7 R 2 
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d10
101111011	// SHIFT r7 L 3
101111010	// SHIFT r7 L 2		// 01000000
100111101	// AND r7 r5
101111101	// SHIFT r7 R 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d7 00001000 d11 d10 d9 d8 d7 d6 d5 0
101111010	// SHIFT r7 L 2
100111101	// AND r7 r5
101111010	// SHIFT r7 L 2
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d6
101111001	// SHIFT r7 L 1
100111101	// AND r7 r5
101111011	// SHIFT r7 L 3
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d4
101111011	// SHIFT r7 L 3
101111011	// SHIFT r7 L 3
100111100	// AND r7 r4
101111110	// SHIFT r7 R 2
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d3
101111011	// SHIFT r7 L 3
101111010	// SHIFT r7 L 2
100111100	// AND r7 r4
101111101	// SHIFT r7 R 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d1
101111011	// SHIFT r7 L 3		// 00000010 => 00010000
100111100	// AND r7 r4
101111001	// SHIFT r7 L 1
011110111	// XOR r6 r7		// p8cal_p4cal_p2cal_00000	
010111010	// MOV r7 2		// d11
101111011	// SHIFT r7 L 3
101111011	// SHIFT r7 L 3
100111101	// AND r7 r5
101111111	// SHIFT r7 R 3 
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d9  d11 d10 d9 d8 d7 d6 d5 0 -- 0  0  0  0  0  0  1  0 -- p8 p4 p2 p1 p0 0 0 0
101111011	// SHIFT r7 L 3
101111001	// SHIFT r7 L 1
100111101	// AND r7 r5
101111101	// SHIFT r7 R 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d7   0   0   0   0   1   0   0   0 --- 
101111010	// SHIFT r7 L 2
100111101	// AND r7 r5
101111001	// SHIFT r7 L 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d5
100111101	// AND r7 r5
101111011	// SHIFT r7 L 3
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d4
101111011	// SHIFT r7 L 3 
101111011	// SHIFT r7 L 3
100111100	// AND r7 r4
101111111	// SHIFT r7 R 3
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d2  d4 d3 d2 d1 0 0 0 0 --- 
101111011	// SHIFT r7 L 3
101111001	// SHIFT r7 L 1
100111100	// AND r7 r4
101111101	// SHIFT r7 R 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d1
101111011	// SHIFT r7 L 3
100111100	// AND r7 r4
011110111	// XOR r6 r7		// p8cal_p4cal_p2cal_p1cal_0000		
010111010	// MOV r7 2		// d11
101111011	// SHIFT r7 L 3
101111011	// SHIFT r7 L 3
100111101	// AND r7 r5 
101111111	// SHIFT r7 R 3
101111101	// SHIFT r7 R 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d10
101111011	// SHIFT r7 L 3
101111010	// SHIFT r7 L 2
100111101	// AND r7 r5 
101111111	// SHIFT r7 R 3
011110111	// XOR r6 r7		
010111010	// MOV r7 2		// d9
101111011	// SHIFT r7 L 3
101111001	// SHIFT r7 L 1
100111101	// AND r7 r5 
101111110	// SHIFT r7 R 2
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d8
101111011	// SHIFT r7 L 3
100111101	// AND r7 r5 
101111101	// SHIFT r7 R 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d7
101111010	// SHIFT r7 L 2
100111101	// AND r7 r5 
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d6
101111001	// SHIFT r7 L 1
100111101	// AND r7 r5
101111001	// SHIFT r7 L 1 
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d5
100111101	// AND r7 r5
101111010	// SHIFT r7 L 2 
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d4
101111011	// SHIFT r7 L 3
101111011	// SHIFT r7 L 3
100111100	// AND r7 r4
101111111	// SHIFT r7 R 3
101111101	// SHIFT r7 R 1 
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d3
101111011	// SHIFT r7 L 3
101111010	// SHIFT r7 L 2
100111100	// AND r7 r4 
101111111	// SHIFT r7 R 3
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d2
101111011	// SHIFT r7 L 3
101111001	// SHIFT r7 L 1
100111100	// AND r7 r4 
101111110	// SHIFT r7 R 2
011110111	// XOR r6 r7
010111010	// MOV r7 2		// d1
101111011	// SHIFT r7 L 3
100111100	// AND r7 r4 
101111101	// SHIFT r7 R 1
011110111	// XOR r6 r7
010111010	// MOV r7 2		// p8
101111011	// SHIFT r7 L 3
101111011	// SHIFT r7 L 3
100111011	// AND r7 r3
101111111	// SHIFT r7 R 3
101111101	// SHIFT r7 R 1 
011110111	// XOR r6 r7
010111010	// MOV r7 2		// p4
101111011	// SHIFT r7 L 3
101111010	// SHIFT r7 L 2
100111011	// AND r7 r3 
101111111	// SHIFT r7 R 3
011110111	// XOR r6 r7
010111010	// MOV r7 2		// p2
101111011	// SHIFT r7 L 3
101111001	// SHIFT r7 L 1
100111011	// AND r7 r3 
101111110	// SHIFT r7 R 2
011110111	// XOR r6 r7
010111010	// MOV r7 2		// p1
101111011	// SHIFT r7 L 3
100111011	// AND r7 r3 
101111101	// SHIFT r7 R 1
011110111	// XOR r6 r7		// store calc parity p8cal_p4cal_p2cal_p1cal_p0cal_000
010001010	// MOV r1 2        // CMP p0   0   0   0   0   1   0   0   0 
101001010	// SHIFT r1 L 2
100001011	// AND r1 r3
010010010	// MOV r2 2
101010010	// SHIFT r2 L 2
100010110	// AND r2 r6
110001010	// CMP r1 r2
111100001	// BNE A SEC
010001010	// MOV r1 2        // CMP p8
101001011	// SHIFT r1 L 3
101001011	// SHIFT r1 L 3
100001011	// AND r1 r3
010010010	// MOV r2 2
101010011	// SHIFT r2 L 3
101010011	// SHIFT r2 L 3
100010110	// AND r2 r6
110001010	// CMP r1 r2 
111100010	// BNE A DED
010001010	// MOV r1 2        // CMP p4
101001011	// SHIFT r1 L 3
101001010	// SHIFT r1 L 2
100001011	// AND r1 r3
010010010	// MOV r2 2
101010011	// SHIFT r2 L 3
101010010	// SHIFT r2 L 2
100010110	// AND r2 r6
110001010	// CMP r1 r2 
111100010	// BNE A DED
010001010	// MOV r1 2        // CMP p2
101001011	// SHIFT r1 L 3
101001001	// SHIFT r1 L 1
100001011	// AND r1 r3
010010010	// MOV r2 2
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1
100010110	// AND r2 r6
110001010	// CMP r1 r2
111100010	// BNE A DED
010001010	// MOV r1 2        // CMP p1
101001011	// SHIFT r1 L 3
100001011	// AND r1 r3
010010010	// MOV r2 2
101010011	// SHIFT r2 L 3
100010110	// AND r2 r6
110001010	// CMP r1 r2
111100010	// BNE A DED
010001000	// MOV r1 0        // NED:
010010011	// MOV r2 3
101010010	// SHIFT r2 L 2
010111010	// MOV r7 2
011010111	// XOR r2 r7
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1		// 11100000
100010101	// AND r2 r5
101010111	// SHIFT r2 R 3
101010110	// SHIFT r2 R 2		
011001010	// XOR r1 r2		// final format r1 = F1 F0 0 0 0 D11 D10 D9
010010011	// MOV r2 3
101010010	// SHIFT r2 L 2
010111011	// MOV r7 3
011010111	// XOR r2 r7
101010001	// SHIFT r2 L 1		// 00011110
100010101	// AND r2 r5
101010011	// SHIFT r2 L 3       // r2 = d8 d7 d6 d5 
010011011	// MOV r3 3		// 00000011
101011010	// SHIFT r3 L 2		// 00001100
010111011	// MOV r7 3		// 00001111
011011111	// XOR r3 r7		// 00001111
101011011	// SHIFT r3 L 3
101011001	// SHIFT r3 L 1
100011100	// AND r3 r4       // 0000d4d3d2d1
101011111	// SHIFT r3 R 3 
101011101	// SHIFT r3 R 1
011010011	// XOR r2 r3		// final format r2 = D8 D7 D6 D5 D4 D3 D2 D1
010011001	// MOV r3 1
010100010	// MOV r4 2
110011100	// CMP r3 r4
111100011	// BNE A p3END
010001010	// MOV r1 2		// SEC(single error correction): 00000010
101001010	// SHIFT r1 L 2    // 0 0 0 0 1 0 0 0 (mask p0 we do not need it anymore)
011001011	// XOR r1 r3       // p8 p4 p2 p1 0 0 0 0
011001110	// XOR r1 r6       // xor with calculated version this will give us the corrupted position 	
010010011	// MOV r2 3
101010010	// SHIFT r2 L 2
010111011	// MOV r7 3
011010111	// XOR r2 r7
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1		// 11110000
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111100100	// BNE A d10
010001010	// MOV r1 2				
101001011	// SHIFT r1 L 3
101001011	// SHIFT r1 L 3
011101001	// XOR r5 r1		// flip d11 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC		
010001010	// MOV r1 2		 // d10-loop	
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010011	// MOV r2 3       
101010010	// SHIFT r2 L 2
010111010	// MOV r7 2
011010111	// XOR r2 r7
101010011	// SHIFT r2 L 3 		// 01110000	
101010001	// SHIFT r2 L 1
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111100101	// BNE A d9
010001010	// MOV r1 2
101001011	// SHIFT r1 L 3
101001010	// SHIFT r1 L 2
011101001	// XOR r5 r1		// flip d10 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		 // d9-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010011	// MOV r2 3          
101010010	// SHIFT r2 L 2    // 0000 1101
010111001	// MOV r7 1
011010111	// XOR r2 r7
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111100110	// BNE A d8
010001010	// MOV r1 2
101001011	// SHIFT r1 L 3 
101001001	// SHIFT r1 L 1
011101001	// XOR r5 r1		// flip d9 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		// d8-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010011	// MOV r2 3        
101010011	// SHIFT r2 L 3
101010011	// SHIFT r2 L 3		// 00110000		
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111100111	// BNE A d7
010001010	// MOV r1 2
101001011	// SHIFT r1 L 3		// 00010000		
011101001	// XOR r5 r1 		// flip d8 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		// d7-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010010	// MOV r2 2        // 0000 1011  
101010010	// SHIFT r2 L 2
010111011	// MOV r7 3 
011010111	// XOR r2 r7
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1		// 10110000	
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111101000	// BNE A d6
010001010	// MOV r1 2
101001010	// SHIFT r1 L 2
011101001	// XOR r5 r1		// flip d7 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		   // d6-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010010	// MOV r2 2         
101010010	// SHIFT r2 L 2
010111010	// MOV r7 2 
011010111	// XOR r2 r7
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1		// 10100000	
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111101001	// BNE A d5
010001010	// MOV r1 2
101001001	// SHIFT r1 L 1		// 00000100		
011101001	// XOR r5 r1		// flip d6 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		// d5-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010010	// MOV r2 2         
101010010	// SHIFT r2 L 2 
010111001	// MOV r7 1 
011010111	// XOR r2 r7
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1		// 10010000
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111101010	// BNE A p8
010001010	// MOV r1 2		// 00000010
011101001	// XOR r5 r1		// flip d5 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		// p8-loop	
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010010	// MOV r2 2        
101010011	// SHIFT r2 L 3 
101010011	// SHIFT r2 L 3	
110001010	// CMP r1 r2		// jump to the end because no change to p8
111101011	// BNE A d4
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		// d4-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010011	// MOV r2 3        
101010010	// SHIFT r2 L 2 
010111010	// MOV r7 2
011010111	// XOR r2 r7
101010011	// SHIFT r2 L 3		// 01110000
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111101100	// BNE A d3
010001010	// MOV r1 2
101001011	// SHIFT r1 L 3
101001011	// SHIFT r1 L 3		// 10000000		
011100001	// XOR r4 r1		// flip d4 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		 // d3-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010011	// MOV r2 3        
101010011	// SHIFT r2 L 3
101010010	// SHIFT r2 L 2		// 01100000	
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111101101	// BNE A d2
010001010	// MOV r1 2
101001011	// SHIFT r1 L 3
101001010	// SHIFT r1 L 2		// 01000000		
011100001	// XOR r4 r1		// flip d3 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		// d2-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010001	// MOV r2 1            
101010010	// SHIFT r2 L 2 
010111001	// MOV r7 1
011010111	// XOR r2 r7
101010011	// SHIFT r2 L 3 
101010001	// SHIFT r2 L 1 		// 01010000	
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111101110	// BNE A p4
010001010	// MOV r1 2
101001011	// SHIFT r1 L 3
101001001	// SHIFT r1 L 1 		// 00100000		
011100001	// XOR r4 r1		// flip d2 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		// p4-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010010	// MOV r2 2            
101010011	// SHIFT r2 L 3
101010010	// SHIFT r2 L 2		// 01000000	
110001010	// CMP r1 r2		// jump to the end because no change to p4
111101111	// BNE A d1
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		 // d1-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010011	// MOV r2 3        // 0000 0011     
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1	
110001010	// CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
111110000	// BNE A p2
010001010	// MOV r1 2
101001011	// SHIFT r1 L 3		// 00010000		
011100001	// XOR r4 r1		// flip d1 then jump to end
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		// p2-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010010	// MOV r2 2            // 0000 0010        
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1
110001010	// CMP r1 r2		// jump to the end because no change to p2
111110001	// BNE A p1
010001001	// MOV r1 1
010010010	// MOV r2 2
110001010	// CMP r1 r2
111110010	// BNE A ENDSEC
010001010	// MOV r1 2		// p1-loop
101001010	// SHIFT r1 L 2    
011001011	// XOR r1 r3       
011001110	// XOR r1 r6   
010010010	// MOV r2 2        
101010011	// SHIFT r2 L 3		// 00010000	
110001010	// CMP r1 r2		// jump to the end because no change to p1
111110010	// BNE A ENDSEC
010001010	// MOV r1 2            // end SEC
101001011	// SHIFT r1 L 3 
101001010	// SHIFT r1 L 2		// 01000000
010010011	// MOV r2 3		// 00000011
101010010	// SHIFT r2 L 2		// 00001100
010111010	// MOV r7 2		// 00000010
011010111	// XOR r2 r7		// 00001110
101010011	// SHIFT r2 L 3		// 01110000
101010001	// SHIFT r2 L 1 		// 11100000
100010101	// AND r2 r5
101010111	// SHIFT r2 R 3
101010110	// SHIFT r2 R 2
011001010	// XOR r1 r2		// final format r1 = F1 F0 0 0 0 D11 D10 D9
010010011	// MOV r2 3		// 00000011
101010010	// SHIFT r2 L 2		// 00001100
010111011	// MOV r7 3		// 00000011
011010111	// XOR r2 r7		// 00001111
101010001	// SHIFT r2 L 1		// 00011110
100010101	// AND r2 r5		 
101010011	// SHIFT r2 L 3        // d8 d7 d6 d5 0 0 0 0 
010011011	// MOV r3 3		// 00000011
101011010	// SHIFT r3 L 2		// 00001100
010111011	// MOV r7 3		// 00000011
011011111	// XOR r3 r7		// 00001111
101011011	// SHIFT r3 L 3
101011001	// SHIFT r3 L 1    // 11110000
100011100	// AND r3 r4       // 0000 d4 d3 d2 d1 
101011111	// SHIFT r3 R 3
101011101	// SHIFT r3 R 1
011010011	// XOR r2 r3		// final format r2 = D8 D7 D6 D5 D4 D3 D2 D1 	
010011001	// MOV r3 1
010100010	// MOV r4 2
110011100	// CMP r3 r4
111100011	// BNE A p3END
010001000	// MOV r1 0             // DED:
010001010	// MOV r1 2           
101001011	// SHIFT r1 L 3
101001011	// SHIFT r1 L 3		// 1x000000
010010011	// MOV r2 3
101010010	// SHIFT r2 L 2
010111010	// MOV r7 2
011010111	// XOR r2 r7		// 00001010
101010011	// SHIFT r2 L 3
101010001	// SHIFT r2 L 1		// 10100000
100010101	// AND r2 r5
101010111	// SHIFT r2 R 3
101010110	// SHIFT r2 R 2
011001010	// XOR r1 r2		// final format r1 = F1 F0 0 0 0 D11 D10 D9
010010011	// MOV r2 3
101010010	// SHIFT r2 L 2
010111011	// MOV r7 3
011010111	// XOR r2 r7
101010001	// SHIFT r2 L 1		// 00011110
100010101	// AND r2 r5
101010011	// SHIFT r2 L 3
010011011	// MOV r3 3
101011010	// SHIFT r3 L 2
010111011	// MOV r7 3
011011111	// XOR r3 r7		// 00001111
100011100	// AND r3 r4
011010011	// XOR r2 r3		// final format r2 = D8 D7 D6 D5 D4 D3 D2 D1 	
010011000	// MOV r3 0        // p3END
010011011	// MOV r3 3       
101011010	// SHIFT r3 L 2
010100010	// MOV r4 2
011011100	// XOR r3 r4
101011011	// SHIFT r3 L 3
101011001	// SHIFT r3 L 1        // 11100000
010011011	// MOV r3 3            // 00000011
101011011	// SHIFT r3 L 3        // 00011000
010100001	// MOV r4 1            // 00000001
011011100	// XOR r3 r4           // 00011001
101011010	// SHIFT r3 L 2        // 01100100 = 100 register r0 stored
000000011	// LDR r0 r3	
101000001	// SHIFT r0 L 1        // i*2        
001010000	// STR r2 r0
010000101	// ADD r0 1
001001000	// STR r1 r0
000000011	// LDR r0 r3
010000101	// ADD r0 1
001000011	// STR r0 r3
010001001	// MOV r1 1            // 00000001
101001011	// SHIFT r1 L 3        // 00001000
010001111	// ADD r1 3            // 00001011
010001111	// ADD r1 3
010001101	// ADD r1 1
110000001	// CMP r0 r1
111100000	// BNE A p2for
010000000	// MOV r0 0
