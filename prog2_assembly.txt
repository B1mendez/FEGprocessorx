MOV r0 0 		// initialize loop counter i

SHIFT r0 L 1
ADD r0 3 
ADD r0 3
ADD r0 3
ADD r0 3
ADD r0 3
ADD r0 3
ADD r0 3
ADD r0 3
ADD r0 3
ADD r0 3		// r0 = 2*i + 30

LDR r1 r0		// r1 = data_mem[2*i + 30] LSW
ADD r0 1
LDR r2 r0		// r2 = data_mem[2*i + 31] MSB

MOV r3 0   		// Store all the parity bits as p8_p4_p2_p1_p0_000       

//p0
MOV r4 00000001
AND r4 r1
XOR r3 r4		// 0000000p0
SHIFT r3 L 3		// 0000p0_000

//p1
MOV r4 00000010		// Mask all bits in r1 except the second bit (p1)
AND r4 r1			
SHIFT r4 L 3 		// 000p10_000
XOR r3 r4		// 000p1_p0_000 stored in r3

//p2
MOV r4 00000100
AND r4 r1		// Mask all bits in r1 except the second bit (p2)
SHIFT r1 R 1     	// Shift to the right to align with p2 in r3
XOR r3 r1          	// Store p2 in r3 00_p2_p1_p0_000

//p4
MOV r4 00010000		// Mask all bits in r1 except the fifth bit (p4)         
AND r4 r1	        
SHIFT r1 L 3     	// Shift to the right to align with p4 in r3
XOR r3 r1          	// Store p4 in r3 0p4_p2_p1_p0_000

//p8
MOV r4 00000001		// Mask all bits in r2 except the first bit (p8)
AND r4 r2		
SHIFT r2 R 1     	// Shift to the right to align with p8 in r3
XOR r3 r4          	// Store p8 in r3 p8_p4_p2_p1_p0_000

MOV r4 0          	
MOV r5 0          	

// Extract d1-d4 from r1
MOV r6 11100000		// Mask d4 d3 d2 0 0 0 0 0 
AND r6 r1	       	
XOR r4 r6         	// Store d2-d4 in r4
MOV r6 00001000		// get d1 and add to r4
AND r6 r1
SHIFT r6 L 1
XOR r4 r6		// store d1:d4 in r4 d4_d3_d2_d1_0000

// Extract d5-d11 from r2
MOV r6 11111110		// mask p8 to have d5:d11
AND r6 r2 	
XOR r5 r6          	// Store d5:d11 in r5 d11_d10_d9_d8_d7_d6_d5_0

MOV r6 0		// Calculate parity bit and store in r6	to get p8_p4_p2_p1_p0_000 calc

//p8_cal
MOV r7 10000000		// d11
AND r7 r5
XOR r6 r7
MOV r7 01000000		// d10
AND r7 r5
SHIFT r7 L 1
XOR r6 r7
MOV r7 00100000		// d9
AND r7 r5
SHIFT r7 L 2
XOR r6 r7
MOV r7 00010000		// d8
AND r7 r5
SHIFT r7 L 3
XOR r6 r7
MOV r7 00001000		// d7
AND r7 r5
SHIFT r7 L 3
SHIFT r7 L 1
XOR r6 r7
MOV r7 00000100		// d6
AND r7 r5
SHIFT r7 L 3
SHIFT r7 L 2
XOR r6 r7
MOV r7 00000010		// d5
AND r7 r5
SHIFT r7 L 3
SHIFT r7 L 3
XOR r6 r7		// p8cal_0000000

//p4_cal
MOV r7 10000000		// d11
AND r7 r5
SHIFT R7 R 1 
XOR r6 r7
MOV r7 01000000		// d10
AND r7 r5
XOR r6 r7
MOV r7 00100000		// d9
AND r7 r5
SHIFT r7 L 1
XOR r6 r7
MOV r7 00010000		// d8
AND r7 r5
SHIFT r7 L 2
XOR r6 r7
MOV r7 10000000		// d4
AND r7 r4
SHIFT r7 R 1
XOR r6 r7
MOV r7 01000000		// d3
AND r7 r4
XOR r6 r7
MOV r7 00100000		// d2
AND r7 r4
SHIFT r7 L 1
XOR r6 r7		// p8cal_p4cal_000000

//p2_cal
MOV r7 10000000		// d11
AND r7 r5
SHIFT r7 R 2 
XOR r6 r7
MOV r7 01000000		// d10
AND r7 r5
SHIFT r7 R 1
XOR r6 r7
MOV r7 00001000		// d7
AND r7 r5
SHIFT r7 L 2
XOR r6 r7
MOV r7 00000100		// d6
AND r7 r5
SHIFT r7 L 3
XOR r6 r7
MOV r7 10000000		// d4
AND r7 r4
SHIFT r7 R 2
XOR r6 r7
MOV r7 01000000		// d3
AND r7 r4
SHIFT r7 R 1
XOR r6 r7
MOV r7 00010000		// d1
AND r7 r4
SHIFT r7 L 1
XOR r6 r7		// p8cal_p4cal_p2cal_00000	

//p1_cal
MOV r7 10000000		// d11
AND r7 r5
SHIFT r7 R 3 
XOR r6 r7
MOV r7 00100000		// d9
AND r7 r5
SHIFT r7 R 1
XOR r6 r7
MOV r7 00001000		// d7
AND r7 r5
SHIFT r7 L 1
XOR r6 r7
MOV r7 00000010		// d5
AND r7 r5
SHIFT r7 L 3
XOR r6 r7
MOV r7 10000000		// d4
AND r7 r4
SHIFT r7 R 3
XOR r6 r7
MOV r7 00100000		// d2
AND r7 r4
SHIFT r7 R 1
XOR r6 r7
MOV r7 00010000		// d1
AND r7 r4
XOR r6 r7		// p8cal_p4cal_p2cal_p1cal_0000		

//p0_cal		// XOR d1:d11 p8 p4 p2 p1
MOV r7 10000000		// d11
AND r7 r5 
SHIFT r7 R 3
SHIFT r7 R 1
XOR r6 r7
MOV r7 01000000		// d10
AND r7 r5 
SHIFT r7 R 3
XOR r6 r7		
MOV r7 00100000		// d9
AND r7 r5 
SHIFT r7 R 2
XOR r6 r7
MOV r7 00010000		// d8
AND r7 r5 
SHIFT r7 R 1
XOR r6 r7
MOV r7 00001000		// d7
AND r7 r5 
XOR r6 r7
MOV r7 00000100		// d6
AND r7 r5
SHIFT r7 L 1 
XOR r6 r7
MOV r7 00000010		// d5
AND r7 r5
SHIFT r7 L 2 
XOR r6 r7
MOV r7 10000000		// d4
AND r7 r4
SHIFT r7 R 3
SHIFT r7 R 1 
XOR r6 r7
MOV r7 01000000		// d3
AND r7 r4 
SHIFT r7 R 3
XOR r6 r7
MOV r7 00100000		// d2
AND r7 r4 
SHIFT r7 R 2
XOR r6 r7
MOV r7 00010000		// d1
AND r7 r4 
SHIFT r7 R 1
XOR r6 r7
MOV r7 10000000		// p8
AND r7 r3
SHIFT r7 R 3
SHIFT r7 R 1 
XOR r6 r7
MOV r7 01000000		// p4
AND r7 r3 
SHIFT r7 R 3
XOR r6 r7
MOV r7 00100000		// p2
AND r7 r3 
SHIFT r7 R 2
XOR r6 r7
MOV r7 00010000		// p1
AND r7 r3 
SHIFT r7 R 1
XOR r6 r7		// store calc parity p8cal_p4cal_p2cal_p1cal_p0cal_000

//free registers are now  r1,r2,r7
//Use R1 & R2 to store p_rec & p_cal then compare
//CMP p0
MOV r1 00001000
AND r1 r3
MOV r2 00001000
AND r2 r6
CMP r1 r2
// if not equal jump to label SEC
// if equal proceed to the next line 

//CMP p8
MOV r1 10000000
AND r1 r3
MOV r2 10000000
AND r2 r6
CMP r1 r2 
// if not equal jump to label DED

//CMP p4
MOV r1 01000000
AND r1 r3
MOV r2 01000000
AND r2 r6
CMP r1 r2 
// if not equal jump to label DED

//CMP p2
MOV r1 00100000
AND r1 r3
MOV r2 00100000
AND r2 r6
CMP r1 r2
// if not equal jump to label DED 

//CMP p1
MOV r1 00010000
AND r1 r3
MOV r2 00010000
AND r2 r6
CMP r1 r2
// if not equal jump to label DED
// if equal that means we made it to the end no errors found label NED

SEC(single error correction): 
MOV r1 11110000		
AND r1 r6		
XOR r1 r3			
MOV r2 11110000	
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 10000000
XOR r5 r1		// flip d11 then jump to end

MOV r1 01110000
AND r1 r6		
XOR r1 r3		
MOV r2 01110000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 01000000		
XOR r5 r1		// flip d10 then jump to end

MOV r1 10110000
AND r1 r6
XOR r1 r3
MOV r2 10110000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 00100000		
XOR r5 r1		// flip d9 then jump to end

MOV r1 00110000
AND r1 r6
XOR r1 r3
MOV r2 00110000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 00010000		
XOR r5 r1 		// flip d8 then jump to end

MOV r1 11010000
AND r1 r6
XOR r1 r3
MOV r2 11010000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 00001000		
XOR r5 r1		// flip d7 then jump to end

MOV r1 01010000
AND r1 r6
XOR r1 r3
MOV r2 01010000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 00000100		
XOR r5 r1		// flip d6 then jump to end

MOV r1 10010000
AND r1 r6
XOR r1 r3
MOV r2 10010000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 00000010		
XOR r5 r1		// flip d5 then jump to end

MOV r1 10000000
AND r1 r6
XOR r1 r3
MOV r2 10000000
CMP r1 r2		// jump to the end because no change to p8

MOV r1 11100000
AND r1 r6
XOR r1 r3
MOV r2 11100000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 10000000		
XOR r4 r1		// flip d4 then jump to end

MOV r1 01100000
AND r1 r6
XOR r1 r3
MOV r2 01100000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 01000000		
XOR r4 r1		// flip d3 then jump to end

MOV r1 10100000
AND r1 r6
XOR r1 r3
MOV r2 10100000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 00100000		
XOR r4 r1		// flip d2 then jump to end

MOV r1 00100000
AND r1 r6
XOR r1 r3
MOV r2 00100000		
CMP r1 r2		// jump to the end because no change to p4

MOV r1 11000000
AND r1 r6
XOR r1 r3
MOV r2 11000000		
CMP r1 r2		// if they equal proceed to next line if not jump 2 lines
MOV r1 00010000		
XOR r4 r1		// flip d1 then jump to end

MOV r1 01000000
AND r1 r6
XOR r1 r3
MOV r2 01000000		
CMP r1 r2		// jump to the end because no change to p2

MOV r1 10000000
AND r1 r6
XOR r1 r3
MOV r2 10000000		
CMP r1 r2		// jump to the end because no change to p1


MOV r1 01000000
MOV r2 11100000
XOR r2 r5
SHIFT r2 R 3
SHIFT r2 R 2
XOR r1 r2		// final format r1 = F1 F0 0 0 0 D11 D10 D9
MOV r2 00011110
AND r2 r5
SHIFT r2 L 3
MOV r3 11110000
SHIFT r3 R 3
SHIFT r3 R 1
XOR r2 r3		// final format r2 = D8 D7 D6 D5 D4 D3 D2 D1 	

//register r1-r3 & r6, r7 are free
//r4 has d4_d3_d2_d1_0000
//r5 has d11_d10_d9_d8_d7_d6_d5_0
DED:
MOV r1 1x000000
MOV r2 11100000
XOR r2 r5
SHIFT r2 R 3
SHIFT r2 R 2
XOR r1 r2		// final format r1 = F1 F0 0 0 0 D11 D10 D9

MOV r2 00011110
AND r2 r5
SHIFT r2 L 3
MOV r3 11110000
SHIFT r3 R 3
SHIFT r3 R 1
XOR r2 r3		// final format r2 = D8 D7 D6 D5 D4 D3 D2 D1 	

NED:
MOV r1 00000000
MOV r2 11100000
XOR r2 r5
SHIFT r2 R 3
SHIFT r2 R 2
XOR r1 r2		// final format r1 = F1 F0 0 0 0 D11 D10 D9

MOV r2 00011110
AND r2 r5
SHIFT r2 L 3
MOV r3 11110000
SHIFT r3 R 3
SHIFT r3 R 1
XOR r2 r3		// final format r2 = D8 D7 D6 D5 D4 D3 D2 D1 	

ADD r0 1
BEQ
